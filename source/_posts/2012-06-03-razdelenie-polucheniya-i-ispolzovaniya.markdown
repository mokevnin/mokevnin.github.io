---
layout: post
title: "Разделение получения и использования"
date: 2012-06-03 20:54
comments: true
published: true
categories: separation, principle
---

В ruby очень распостранены цепочки кода, а еще любовь к "однострочникам". Только не все йогурты одинаково полезны.

<!-- more -->

{% codeblock somewhere_in_test.rb %}

sign_in(create :user) # factory_girl, test

{% endcodeblock %}

Тот случай когда красота обманчива. Что может понадобится:

* распечатать user для дебага;
* использовать его дальше по коду.

В конечном счете, этот код заставляет переписать его тех, кто дальше с ним
работает.

{% codeblock somewhere_in_test.rb %}

assert_equal attrs[:name], User.find_by_email(attrs[:email]).name

{% endcodeblock %}

Иногда так делают, когда тест пишется первый раз и все обходится одной
проверкой. Дальше, как обычно, придется переписывать.

Еще пример:

{% codeblock somewhere_in_test.rb %}

def destroy
  Company.find(params[:id]).destroy
end

{% endcodeblock %}

Иногда, действительно, подход сработает и казалось бы зачем писать на одну
строчку больше. Но на самом деле вы заранее об этом, скорее всего, не
знаете и не можете гарантировать что получаемые данные не будут
использованы дальше по коду, я уже не говорю об отладке.

### Резюме

В [философии питона](http://ru.wikipedia.org/wiki/Python#.D0.A4.D0.B8.D0.BB.D0.BE.D1.81.D0.BE.D1.84.D0.B8.D1.8F)
есть очень хороший принцип подходящий под ситуацию:
"особые случаи не настолько особы, чтобы нарушать правила". А правило может звучать так: "получаем отдельно, используем
отдельно".
